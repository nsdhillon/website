<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Narinder Dhillon on Narinder Dhillon</title>
    <link>https://ndhillon.com/</link>
    <description>Recent content in Narinder Dhillon on Narinder Dhillon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Narinder Dhillon</copyright>
    <lastBuildDate>Wed, 24 Jan 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Customization</title>
      <link>https://ndhillon.com/docs/customization/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/customization/</guid>
      <description>

&lt;p&gt;It is possible to carry out many customizations &lt;em&gt;without&lt;/em&gt; editing any code in the &lt;code&gt;themes/hugo-nsd/&lt;/code&gt; folder, making it easier to update the framework in the future.&lt;/p&gt;

&lt;h2 id=&#34;menu&#34;&gt;Menu&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;[[menu.main]]&lt;/code&gt; entries towards the bottom of &lt;code&gt;config.toml&lt;/code&gt; define the navigation links at the top of the website. They can be added or removed as desired.&lt;/p&gt;

&lt;p&gt;To create a dropdown sub-menu, add &lt;code&gt;identifier = &amp;quot;something&amp;quot;&lt;/code&gt; to the parent item and &lt;code&gt;parent = &amp;quot;something&amp;quot;&lt;/code&gt; to the child item.&lt;/p&gt;

&lt;h2 id=&#34;website-icon&#34;&gt;Website icon&lt;/h2&gt;

&lt;p&gt;Save your main icon and mobile icon as square PNG images named &lt;code&gt;icon.png&lt;/code&gt; (32x32 pixels) and &lt;code&gt;icon-192.png&lt;/code&gt; (192x192 pixels), respectively. Place them in your root &lt;code&gt;static/img/&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;analytics&#34;&gt;Analytics&lt;/h2&gt;

&lt;p&gt;To enable &lt;a href=&#34;http://www.google.com/analytics&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, add your tracking code in &lt;code&gt;config.toml&lt;/code&gt; similarly to &lt;code&gt;googleAnalytics = &amp;quot;UA-12345678-9&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-scripts-js&#34;&gt;Add scripts (JS)&lt;/h2&gt;

&lt;p&gt;To add a &lt;strong&gt;third party script&lt;/strong&gt;, create a file named &lt;code&gt;head_custom.html&lt;/code&gt; in a &lt;code&gt;layouts/partials/&lt;/code&gt; folder at the root of your website (not in the &lt;code&gt;themes&lt;/code&gt; folder). Any HTML code added to this file will be included within your website&amp;rsquo;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. Therefore, it&amp;rsquo;s suitable for adding custom metadata or third party scripts specified with the &lt;em&gt;async&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;Whereas for your own &lt;strong&gt;local scripts&lt;/strong&gt;, you can link your local JS assets (relative to your root &lt;code&gt;static/js&lt;/code&gt;) from your &lt;code&gt;config.toml&lt;/code&gt; using &lt;code&gt;custom_js  = [&amp;quot;custom.js&amp;quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;permalinks&#34;&gt;Permalinks&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Permalinks&lt;/em&gt;, or &lt;em&gt;permanent links&lt;/em&gt;, are URLs to individual pages and posts on your website. They are permanent web addresses which can be used to link to your content. Using Hugo&amp;rsquo;s &lt;em&gt;permalinks&lt;/em&gt; option these can be easily customized. For example, the blog post URL can be changed to the form &lt;em&gt;yourURL/2018/02/20/my-post-slug&lt;/em&gt; by adding the following near the top of your &lt;code&gt;config.toml&lt;/code&gt; (before &lt;code&gt;[params]&lt;/code&gt; settings):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;:slug&lt;/code&gt; defaults to the filename of the post, excluding the file extension. However, slug may be overridden on a per post basis if desired, simply by setting &lt;code&gt;slug = &amp;quot;my-short-post-title&amp;quot;&lt;/code&gt; in your post preamble.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; let&amp;rsquo;s consider changing the URL path of posts from &lt;code&gt;post/&lt;/code&gt; to &lt;code&gt;blog/&lt;/code&gt;. First, add the following parameters right above the &lt;code&gt;[params]&lt;/code&gt; section of your &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/blog/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add &lt;code&gt;aliases = [&amp;quot;/blog/&amp;quot;]&lt;/code&gt; to your post archive page &lt;code&gt;post/_index.md&lt;/code&gt; so that it can be accessed from the &lt;em&gt;/blog/&lt;/em&gt; URL.&lt;/p&gt;

&lt;h2 id=&#34;customize-style-css&#34;&gt;Customize style (CSS)&lt;/h2&gt;

&lt;p&gt;For advanced customization of the style, you can link custom CSS assets (relative to your root &lt;code&gt;static/css&lt;/code&gt;) from your &lt;code&gt;config.toml&lt;/code&gt; using &lt;code&gt;custom_css = [&amp;quot;custom.css&amp;quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s override some of Hugo-nsd&amp;rsquo;s default styles. First, define &lt;code&gt;custom_css = [&amp;quot;override.css&amp;quot;]&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;. Then we can create the file &lt;code&gt;static/css/override.css&lt;/code&gt;, relative to your website root (i.e. &lt;strong&gt;not&lt;/strong&gt; in the &lt;code&gt;themes&lt;/code&gt; directory). Add your custom CSS to this file.&lt;/p&gt;

&lt;h2 id=&#34;override-a-template&#34;&gt;Override a template&lt;/h2&gt;

&lt;p&gt;Hugo uses a &lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34; target=&#34;_blank&#34;&gt;template lookup&lt;/a&gt; which enables you to override any of Hugo-nsd&amp;rsquo;s files without directly changing them. This can make it easier to update Hugo-nsd in the future since you do not modify any of Hugo-nsd&amp;rsquo;s files directly.&lt;/p&gt;

&lt;p&gt;To override a template in the theme, you simply copy the file you are interested in from &lt;code&gt;themes/Hugo-nsd/&lt;/code&gt; and paste it in your site folder using a similar path. To understand how this works, you should familiarize yourself with template lookup. Finally, when you update Hugo-nsd, remember to compare your version of the file against Hugo-nsd&amp;rsquo;s one, in case you need to propagate any changes across.&lt;/p&gt;

&lt;p&gt;For example, say we wish to add some HTML code to the navigation bar. Let&amp;rsquo;s copy the relevant file &lt;code&gt;themes/Hugo-nsd/layout/partials/navbar.html&lt;/code&gt; to &lt;code&gt;layout/partials/navbar.html&lt;/code&gt; (at the root of your site, &lt;strong&gt;not&lt;/strong&gt; in &lt;code&gt;themes/Hugo-nsd/&lt;/code&gt;), creating the &lt;code&gt;layout/partials/&lt;/code&gt; folders if they do not already exist. Now you can add the HTML code you want to your copy of the file, which will override Hugo-nsd&amp;rsquo;s version.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://ndhillon.com/docs/faq/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/faq/</guid>
      <description>&lt;p&gt;Common questions and answers will be listed here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Feedback &amp; Contributing</title>
      <link>https://ndhillon.com/docs/contribute/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/contribute/</guid>
      <description>&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/ndhillon/hugo-nsd/issues&#34; target=&#34;_blank&#34;&gt;issue tracker&lt;/a&gt; to report bugs or submit feature requests. Alternatively, feel free to modify the code and submit a pull request on Github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Front Matter</title>
      <link>https://ndhillon.com/docs/front-matter/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/front-matter/</guid>
      <description>&lt;p&gt;Front matter allows page-specific variables to be included at the top of a Markdown file using &lt;a href=&#34;https://github.com/toml-lang/toml/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;TOML format&lt;/a&gt;, set between triple-plus &lt;code&gt;+++&lt;/code&gt; lines. The variables may include metadata such as page title, date published, author, categories, tags, and so on. Here is a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;+++
date = 2018-02-20
title = &amp;quot;My first blog post&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Archetypes automate in the creation of Front matter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ndhillon.com/docs/get-started/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/get-started/</guid>
      <description>

&lt;p&gt;This quick tutorial will show you how to setup and use Hugo-nsd.&lt;/p&gt;

&lt;h2 id=&#34;core-parameters&#34;&gt;Core parameters&lt;/h2&gt;

&lt;p&gt;The core parameters for the website can be edited in the &lt;code&gt;config.toml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;baseurl&lt;/code&gt; to your website URL (we recommend &lt;a href=&#34;https://ndhillon.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34;&gt;GitHub Pages&lt;/a&gt; for free hosting)&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;title&lt;/code&gt; to your desired website title such as your name&lt;/li&gt;
&lt;li&gt;The example Disqus commenting variable should be cleared (e.g. &lt;code&gt;disqusShortname = &amp;quot;&amp;quot;&lt;/code&gt;) or set to your own &lt;a href=&#34;https://disqus.com/&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt; shortname to enable commenting&lt;/li&gt;
&lt;li&gt;Edit your details under &lt;code&gt;[params]&lt;/code&gt;; these will be displayed mainly in the homepage &lt;em&gt;about&lt;/em&gt; and &lt;em&gt;contact&lt;/em&gt; widgets (if used). To disable a contact field, simply clear the value to &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Place a square cropped portrait photo named &lt;code&gt;portrait.jpg&lt;/code&gt; into the &lt;code&gt;static/img/&lt;/code&gt; folder, overwriting any defaults. Note that you can edit the &lt;code&gt;avatar&lt;/code&gt; filepath to point to a different image name or clear the value to disable the avatar feature. Alternatively, set &lt;code&gt;gravatar&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to use the Gravatar/Wordpress avatar associated with your &lt;code&gt;email&lt;/code&gt; address.&lt;/li&gt;
&lt;li&gt;To enable LaTeX math for your site, set &lt;code&gt;math = true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Social/Hugo-nsd networking links are defined as multiples of &lt;code&gt;[[params.social]]&lt;/code&gt;. They can be created or deleted as necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;customize-the-homepage&#34;&gt;Customize the homepage&lt;/h2&gt;

&lt;p&gt;Refer to our guide on using &lt;a href=&#34;https://ndhillon.com/docs/widgets/&#34; target=&#34;_blank&#34;&gt;widgets&lt;/a&gt; to customize your homepage.&lt;/p&gt;

&lt;h2 id=&#34;add-your-content&#34;&gt;Add your content&lt;/h2&gt;

&lt;p&gt;Refer to our guide on &lt;a href=&#34;https://ndhillon.com/docs/managing-content/&#34; target=&#34;_blank&#34;&gt;managing content&lt;/a&gt; to create your own publications, blog posts, talks, and projects.&lt;/p&gt;

&lt;h2 id=&#34;remove-unused-widgets-and-pages&#34;&gt;Remove unused widgets and pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ndhillon.com/docs/managing-content/#removing-content&#34; target=&#34;_blank&#34;&gt;How to remove unused widgets and content pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;p&gt;A different theme can be set using  the &lt;code&gt;color_theme&lt;/code&gt; option in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following font styles are available and can be set by the &lt;code&gt;font&lt;/code&gt; option in &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default (modern)&lt;/li&gt;
&lt;li&gt;playfair (serif)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To &lt;strong&gt;customize the color theme&lt;/strong&gt;, you can copy a theme such as &lt;code&gt;themes/Hugo-nsd/data/themes/default.toml&lt;/code&gt; to &lt;code&gt;data/themes/default.toml&lt;/code&gt; (at the root of your site, &lt;strong&gt;not&lt;/strong&gt; in &lt;code&gt;themes/Hugo-nsd/&lt;/code&gt;), creating the &lt;code&gt;data/themes/&lt;/code&gt; folders if they do not already exist. Now you can adjust the colors within your theme file. Consider renaming and &lt;em&gt;sharing&lt;/em&gt; your new color theme with the &lt;a href=&#34;http://discuss.gohugo.io/&#34; target=&#34;_blank&#34;&gt;community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;customize the font theme&lt;/strong&gt;, you can copy a theme such as &lt;code&gt;themes/Hugo-nsd/data/fonts/default.toml&lt;/code&gt; to &lt;code&gt;data/fonts/default.toml&lt;/code&gt; (at the root of your site, &lt;strong&gt;not&lt;/strong&gt; in &lt;code&gt;themes/Hugo-nsd/&lt;/code&gt;), creating the &lt;code&gt;data/fonts/&lt;/code&gt; folders if they do not already exist. Now you can adjust the font size and family. Consider renaming and &lt;em&gt;sharing&lt;/em&gt; your new font theme with the &lt;a href=&#34;http://discuss.gohugo.io/&#34; target=&#34;_blank&#34;&gt;community&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;view-your-site&#34;&gt;View your site&lt;/h2&gt;

&lt;p&gt;If you installed on your computer with &lt;strong&gt;Git&lt;/strong&gt; or &lt;strong&gt;ZIP&lt;/strong&gt;, view your new website by running the &lt;code&gt;hugo server -v&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Now visit &lt;a href=&#34;http://localhost:1313&#34; target=&#34;_blank&#34;&gt;localhost:1313&lt;/a&gt; and your new Hugo-nsd powered website will appear. Otherwise, if using &lt;strong&gt;Netlify&lt;/strong&gt;, they will provide you with your URL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Language</title>
      <link>https://ndhillon.com/docs/language/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/language/</guid>
      <description>

&lt;p&gt;Both the &lt;strong&gt;interface&lt;/strong&gt; and &lt;strong&gt;content&lt;/strong&gt; language can be changed to suit your needs.&lt;/p&gt;

&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Interface Language&lt;/strong&gt; is used to change the language throughout your site. The following interface languages are currently available: English, 中文 (简体), Español, Português, Deutsch, Euskara, Français, Italiano, 한국어, Nederlands, Polski, Русский, Türkçe, and Tiếng Việt.&lt;/p&gt;

&lt;p&gt;The interface text is stored in language files which are collected in the themes &lt;code&gt;themes/hugo-nsd/i18n/&lt;/code&gt; folder, as well as an &lt;code&gt;i18n/&lt;/code&gt; folder at the root of your project.&lt;/p&gt;

&lt;p&gt;To edit the interface text, copy &lt;code&gt;themes/hugo-nsd/i18n/en.yaml&lt;/code&gt; to &lt;code&gt;i18n/en.yaml&lt;/code&gt; (relative to the root of your website). Open the new file and make any desired changes to the text appearing after &lt;code&gt;translation:&lt;/code&gt;. Note that the language files are formatted in YAML syntax.&lt;/p&gt;

&lt;p&gt;To translate the interface text to another language, follow the above instructions, but name the new file in the form &lt;code&gt;i18n/X.yaml&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the appropriate &lt;a href=&#34;http://www.w3schools.com/tags/ref_language_codes.asp&#34; target=&#34;_blank&#34;&gt;ISO/RFC5646 language identifier&lt;/a&gt; for the translation. Then follow the brief instructions in the &lt;em&gt;Language&lt;/em&gt; section at the bottom of your &lt;code&gt;config.toml&lt;/code&gt;. To change the default language used by the theme, set &lt;code&gt;defaultContentLanguage&lt;/code&gt; to the desired language identifier in your configuration file.&lt;/p&gt;

&lt;p&gt;To translate the navigation bar, you can edit the default &lt;code&gt;[[menu.main]]&lt;/code&gt; instances in &lt;code&gt;config.toml&lt;/code&gt;. However, for a multilingual site, you will need to duplicate all of the &lt;code&gt;[[menu.main]]&lt;/code&gt; instances and rename the new instances from &lt;code&gt;[[menu.main]]&lt;/code&gt; to &lt;code&gt;[[Languages.X.menu.main]]&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the language identifier (e.g. &lt;code&gt;[[Languages.zh.menu.main]]&lt;/code&gt; for Simplified Chinese). Thus, the navigation bar can be displayed in multiple languages.&lt;/p&gt;

&lt;h2 id=&#34;content&#34;&gt;Content&lt;/h2&gt;

&lt;p&gt;To translate a content file in your &lt;code&gt;content/&lt;/code&gt; folder into another language, copy the file to &lt;code&gt;filename.X.md&lt;/code&gt; where &lt;code&gt;filename&lt;/code&gt; is your existing filename and &lt;code&gt;X&lt;/code&gt; is the appropriate &lt;a href=&#34;http://www.w3schools.com/tags/ref_language_codes.asp&#34; target=&#34;_blank&#34;&gt;ISO/RFC5646 language identifier&lt;/a&gt; for the translation. Then translate the content in the new file to the specified language.&lt;/p&gt;

&lt;p&gt;If a page has been translated into multiple languages, a language chooser will appear in the navigation bar to allow the user to select which language they would like to view the page in.&lt;/p&gt;

&lt;p&gt;For further details on Hugo&amp;rsquo;s internationalization and multilingual features, refer to the &lt;a href=&#34;https://gohugo.io/content/multilingual/&#34; target=&#34;_blank&#34;&gt;associated Hugo documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Market Data API Workshop</title>
      <link>https://ndhillon.com/talk/ixapi_workshop/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/talk/ixapi_workshop/</guid>
      <description>

&lt;figure  style=&#34;margin-top:0; margin-bottom:0;&#34;&gt;

  &lt;img src=&#34;https://ndhillon.com/img/talk/iXAPI_workshop.png&#34;  /&gt;
  

&lt;/figure&gt;


&lt;p&gt;The iXAPI is lightweight integration layer used to access Fixnetix&amp;rsquo;s Low Latency Market Data system. It enables users to develop high-performance, event driven applications with builtin monitoring and resilency.&lt;/p&gt;

&lt;p&gt;At its core iXAPI is designed to enable developers to write topic based publisher/subcriber messaging applications. Publishers send messages to a given topic, typically a string identifier such as &amp;ldquo;BNP&amp;rdquo;, without any knowledge of the recipients (subscribers). Subscribing applications create subscriptions on topics of interest and receive all messages from all publishers for that topic. How the messages are constructed and transported is completely opaque to the client application (both at the publisher and subscriber side), meaning they do not need to understand the details of the underlying messaging system.&lt;/p&gt;

&lt;h2 id=&#34;business-benefits&#34;&gt;Business Benefits:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Reduce total cost of ownership through consolidation on a single messaging API&lt;/li&gt;
&lt;li&gt;Protect your technology investment and reduce time to market with new innovations&lt;/li&gt;
&lt;li&gt;Simplify the replacement of aging technologies&lt;/li&gt;
&lt;li&gt;Reduce complexity enabling your resources to apply greater focus on your core business&lt;/li&gt;
&lt;li&gt;Backed by major financial institutions and technology vendors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sound complicated?  Join us on June 1st from 9:00AM to 4:00 PM for a discussion with iXAPI engineers on the evolving landscape of low latency communication.  We’ll explore iXAPI use cases and best pratices to create a low latency event driven application.&lt;/p&gt;

&lt;p&gt;The workshop will be followed by food, drinks from 4:00 - 5:30PM:&lt;/p&gt;

&lt;p&gt;iXAPI Workshop is a &lt;em&gt;work in progress&lt;/em&gt;. We created &lt;a href=&#34;https://github.com/nsdhillon/iXAPI_workshop&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt; as an education and demonstration tool for clients curious about how documentation, open science workflows, and tools like Github can contribute to a healthy and productive implementation.&lt;/p&gt;

&lt;p&gt;Your ideas and contributions are welcome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://ndhillon.com/docs/deployment/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/deployment/</guid>
      <description>

&lt;p&gt;Sitescan be deployed in a large variety of ways due to the static nature of the generated website. The recommended deployment method alongside a few of the other most popular techniques are described below.&lt;/p&gt;

&lt;p&gt;If using Netlify, your site will be built automatically, otherwise run the &lt;code&gt;hugo&lt;/code&gt; command in your terminal to generate your site in the &lt;code&gt;public/&lt;/code&gt; folder - now it is ready to copy across to your host.&lt;/p&gt;

&lt;h2 id=&#34;netlify&#34;&gt;Netlify&lt;/h2&gt;

&lt;p&gt;We recommend deploying your site with Netlify. Netlify is free and provides fast global access, automated deployment when you add or modify content, and one-click HTTPS security. &lt;a href=&#34;https://ndhillon.com/docs/install/&#34; target=&#34;_blank&#34;&gt;Check out our guide to deploy with Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://www.github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; and register for an account if you have not done so already. Github encourage using your real name for your account username, and this can help your Github URL (which you will be assigned later) to have a professional appearance.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/set-up-git/&#34; target=&#34;_blank&#34;&gt;Install Git&lt;/a&gt; if it&amp;rsquo;s not already present on your system. You can check by running &lt;code&gt;git --version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have created your Github account and setup Git on your computer, we will create two new repositories (often abbreviated as &lt;em&gt;repos&lt;/em&gt;) on Github with the following names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hugo-nsd-kickstart&lt;/code&gt; or any other name you like - we will save your Hugo-nsd content to this repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt; where &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; is your Github username - we will save the generated HTML website to this repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create the &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt; repository, click the &amp;ldquo;+&amp;rdquo; icon in the top right corner and then choose “New Repository”.&lt;/p&gt;

&lt;p&gt;To create the &lt;code&gt;Hugo-nsd-kickstart&lt;/code&gt; repository, &lt;a href=&#34;https://github.com/sourcethemes/Hugo-nsd-kickstart#fork-destination-box&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;fork&lt;/strong&gt;&lt;/a&gt; the &lt;em&gt;Hugo-nsd Kickstart&lt;/em&gt; repository and clone your fork with Git (download it to your computer) by replacing &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; in the following command with your Github username:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/&amp;lt;USERNAME&amp;gt;/Hugo-nsd-kickstart.git My_Website
cd My_Website
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your &lt;code&gt;config.toml&lt;/code&gt; file, set &lt;code&gt;baseurl = &amp;quot;https://&amp;lt;USERNAME&amp;gt;.github.io/&amp;quot;&lt;/code&gt;, where &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; is your Github username. Stop Hugo if it&amp;rsquo;s running and delete the &lt;code&gt;public&lt;/code&gt; directory (if it exists) with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -r public/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add your &lt;em&gt;&lt;USERNAME&gt;.github.io&lt;/em&gt; repository into a submodule in a folder named &lt;em&gt;public&lt;/em&gt;, replacing &lt;em&gt;&lt;USERNAME&gt;&lt;/em&gt; with your Github username:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add everything to your local git repository and push it up to your remote repository on GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whilst running the above commands you may be prompted for your Github username and password.&lt;/p&gt;

&lt;p&gt;Next, &lt;strong&gt;regenerate&lt;/strong&gt; your website&amp;rsquo;s HTML code by running Hugo and uploading the &lt;em&gt;public&lt;/em&gt; submodule to GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
cd public
git add .
git commit -m &amp;quot;Build website&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once Git has finished uploading your site to Github, you can open your new  &lt;code&gt;https://&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt; website in your browser, substituting &lt;em&gt;&lt;USERNAME&gt;&lt;/em&gt; with your Github username.&lt;/p&gt;

&lt;h3 id=&#34;custom-domains&#34;&gt;Custom domains&lt;/h3&gt;

&lt;p&gt;You can use your own domain name with Github Pages if you wish. You will need to register a domain, point it to Github, and create a &lt;code&gt;CNAME&lt;/code&gt; file in the &lt;code&gt;static&lt;/code&gt; folder of your website, so that Github knows your intentions. For more information, check out the &lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&#34; target=&#34;_blank&#34;&gt;domains guide by Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember that after you have setup a custom domain, you will need to wait approximately 24-48 hours for the DNS to propagate and then you&amp;rsquo;ll need to update &lt;code&gt;baseurl&lt;/code&gt; in your Hugo &lt;code&gt;config.toml&lt;/code&gt; to your new URL, regenerate your site (see above section), and redeploy.&lt;/p&gt;

&lt;h3 id=&#34;automating-deployment&#34;&gt;Automating deployment&lt;/h3&gt;

&lt;p&gt;If you are feeling more adventurous, you can consider automating deployment such that when a change, such as a new blog post, is pushed to your &lt;code&gt;Hugo-nsd-kickstart&lt;/code&gt; repository, your &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt; repository is automatically re-built.&lt;/p&gt;

&lt;h2 id=&#34;amazon-s3&#34;&gt;Amazon S3&lt;/h2&gt;

&lt;p&gt;By uploading the contents of your &lt;code&gt;public&lt;/code&gt; folder to &lt;a href=&#34;https://aws.amazon.com/s3/&#34; target=&#34;_blank&#34;&gt;Amazon S3&lt;/a&gt;, your site can be served with dynamic scaling to almost unlimited traffic. This approach has the benefit of being one of the cheapest and most reliable hosting options available as you only pay for what you use.&lt;/p&gt;

&lt;h2 id=&#34;web-host-via-ftp&#34;&gt;Web host via FTP&lt;/h2&gt;

&lt;p&gt;Use an FTP client to upload the contents of your &lt;code&gt;public&lt;/code&gt; folder to a web host. This may be especially convenient for Hugo-nsd students and staff who are provided with university web space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing docs</title>
      <link>https://ndhillon.com/docs/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/</guid>
      <description>

&lt;h1 id=&#34;some-big-test&#34;&gt;some big test&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Update</title>
      <link>https://ndhillon.com/docs/update/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/update/</guid>
      <description>

&lt;h2 id=&#34;if-you-installed-by-git-cloning-hugo-nsd&#34;&gt;If you installed by Git cloning &lt;code&gt;hugo-nsd&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Before updating for the first time, the remote &lt;em&gt;origin&lt;/em&gt; repository should be renamed to &lt;em&gt;upstream&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd themes/hugo-nsd
$ git remote rename origin upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list available updates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd themes/hugo-sd
$ git fetch upstream
$ git log --pretty=oneline --abbrev-commit --decorate HEAD..upstream/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, update by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;Check out the &lt;a href=&#34;../../updates&#34;&gt;release notes&lt;/a&gt; for the version that you are updating to, paying attention to the breaking changes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>https://ndhillon.com/docs/widgets/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/widgets/</guid>
      <description>

&lt;p&gt;Widgets empower you to fully customize your site. They display as sections on the homepage or on widget pages. They can be enabled/disabled and configured as desired. The default theme has the following widgets available to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About/biography&lt;/li&gt;
&lt;li&gt;Selected publications&lt;/li&gt;
&lt;li&gt;Recent publications&lt;/li&gt;
&lt;li&gt;Recent news/blog posts&lt;/li&gt;
&lt;li&gt;Projects&lt;/li&gt;
&lt;li&gt;Selected talks&lt;/li&gt;
&lt;li&gt;Recent talks&lt;/li&gt;
&lt;li&gt;Contact&lt;/li&gt;
&lt;li&gt;Tag cloud&lt;/li&gt;
&lt;li&gt;Hero (introduction)&lt;/li&gt;
&lt;li&gt;Featurette (show features)&lt;/li&gt;
&lt;li&gt;Custom widget (add your own content!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The parameters for each widget vary. They can be found in the preamble/frontmatter (between the pair of &lt;code&gt;+++&lt;/code&gt;) for each widget installed in the &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;By default, publications will be displayed in a simple list. If you prefer a more detailed list with abstract and image, you can enable the detailed publication list on the homepage by setting &lt;code&gt;list_format = 2&lt;/code&gt; in &lt;code&gt;content/home/publications.md&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;add-a-widget-to-the-homepage&#34;&gt;Add a widget to the homepage&lt;/h2&gt;

&lt;p&gt;To add a widget manually, copy the relevant widget to your &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Widget identifiers are set to their respective filenames, so a &lt;code&gt;content/home/about.md&lt;/code&gt; widget can be linked from the navigation bar by setting the relevant URL as &lt;code&gt;&amp;quot;#about&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that if you want to use multiple instances of a widget, each widget will be assigned a unique ID based on the filename that you set. You can then use that ID for linking, like in the above example.&lt;/p&gt;

&lt;h2 id=&#34;using-the-custom-widget&#34;&gt;Using the custom widget&lt;/h2&gt;

&lt;p&gt;You can use the custom widget to create your own home page sections.&lt;/p&gt;

&lt;p&gt;Simply duplicate (copy/paste) and rename the example &lt;em&gt;teaching&lt;/em&gt; file at &lt;code&gt;content/home/teaching.md&lt;/code&gt;. Then edit the section title, weight (refer to &lt;em&gt;Ordering sections&lt;/em&gt; below), and content as desired.&lt;/p&gt;

&lt;p&gt;You may also wish to add a navigation link to the top of the page that points to the new section. This can be achieved by adding something similar to the following lines to your &lt;code&gt;config.toml&lt;/code&gt;, where the URL will consist of the first title word in lowercase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[menu.main]]
    name = &amp;quot;Research&amp;quot;
    url = &amp;quot;#research&amp;quot;
    weight = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remove-a-widget-from-the-homepage&#34;&gt;Remove a widget from the homepage&lt;/h2&gt;

&lt;p&gt;If you do not require a particular widget, you can simply delete any associated files from the &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;To remove a navigation link from the top of the page, remove the associated &lt;code&gt;[[menu.main]]&lt;/code&gt; entry in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ordering-widgets&#34;&gt;Ordering widgets&lt;/h2&gt;

&lt;p&gt;The order that the homepage widgets are displayed in is defined by the &lt;code&gt;weight&lt;/code&gt; parameter in each of the files in the &lt;code&gt;content/home/&lt;/code&gt; directory. The widgets are displayed in ascending order of their &lt;code&gt;weight&lt;/code&gt;, so you can simply edit the &lt;code&gt;weight&lt;/code&gt; parameters as desired.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing content with Markdown, LaTeX, and Shortcodes</title>
      <link>https://ndhillon.com/docs/writing-markdown-latex/</link>
      <pubDate>Sat, 17 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/writing-markdown-latex/</guid>
      <description>&lt;p&gt;Content can be written using &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt;, &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX math&lt;/a&gt;, and &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34; target=&#34;_blank&#34;&gt;Hugo Shortcodes&lt;/a&gt;. Additionally, HTML may be used for advanced formatting. This article gives an overview of the most common formatting options.&lt;/p&gt;

&lt;h2 id=&#34;sub-headings&#34;&gt;Sub-headings&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emphasis&#34;&gt;Emphasis&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Italics with *asterisks* or _underscores_.

Bold with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough with ~~two tildes~~.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ordered-lists&#34;&gt;Ordered lists&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;1. First item
2. Another item
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unordered-lists&#34;&gt;Unordered lists&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* First item
* Another item
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;

&lt;p&gt;Images may be added to a page by placing them in your &lt;code&gt;static/img/&lt;/code&gt; folder and referencing them using one of the following two notations:&lt;/p&gt;

&lt;p&gt;A general image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![alternative text for search engines](/img/screenshot.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A numbered figure with caption:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/img/screenshot.png&amp;quot; title=&amp;quot;Figure Caption&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;image-gallery&#34;&gt;Image gallery&lt;/h2&gt;

&lt;p&gt;To add an image gallery to a page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add gallery images to within your &lt;code&gt;static/img/&lt;/code&gt; folder&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reference your images at the end of the front matter of a content file in the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[gallery_item]]
album = &amp;quot;1&amp;quot;
image = &amp;quot;my_image.jpg&amp;quot;
caption = &amp;quot;Write your image caption here&amp;quot;
    
[[gallery_item]]
album = &amp;quot;1&amp;quot;
image = &amp;quot;https://raw.githubusercontent.com/nsdhillon/hugo-nsd/images/screenshot.png&amp;quot;
caption = &amp;quot;Dark theme&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Display the gallery somewhere within your page content by using &lt;code&gt;{{&amp;lt; gallery album=&amp;quot;1&amp;quot; &amp;gt;}}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[I&#39;m a link](https://www.google.com)
[A post]({{&amp;lt; ref &amp;quot;post/hi.md&amp;quot; &amp;gt;}})
[A publication]({{&amp;lt; ref &amp;quot;publication/hi.md&amp;quot; &amp;gt;}})
[A project]({{&amp;lt; ref &amp;quot;project/hi.md&amp;quot; &amp;gt;}})
[Another section]({{&amp;lt; relref &amp;quot;hi.md#who&amp;quot; &amp;gt;}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable linking to a file, such as a PDF, first place the file in your &lt;code&gt;static/files/&lt;/code&gt; folder and then link to it using the following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% staticref &amp;quot;files/cv.pdf&amp;quot; &amp;quot;newtab&amp;quot; %}}Download my CV{{% /staticref %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The optional &lt;code&gt;&amp;quot;newtab&amp;quot;&lt;/code&gt; argument for &lt;code&gt;staticref&lt;/code&gt; will cause the link to be opened in a new tab.&lt;/p&gt;

&lt;h2 id=&#34;emojis&#34;&gt;Emojis&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;http://www.webpagefx.com/tools/emoji-cheat-sheet/&#34; target=&#34;_blank&#34;&gt;Emoji cheat sheet&lt;/a&gt; for available emoticons. The following serves as an example, but you should remove the spaces between each emoji name and pair of semicolons:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I : heart : Narinder : smile :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ❤️ Narinder 😄&lt;/p&gt;

&lt;h2 id=&#34;blockquote&#34;&gt;Blockquote&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;I have more [^1] to say.

[^1]: Footnote example.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have more &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to say.&lt;/p&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code highlighting&lt;/h2&gt;

&lt;p&gt;Pass the &lt;em&gt;language&lt;/em&gt; of the code, such as &lt;code&gt;python&lt;/code&gt;, as a parameter after three backticks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```python
# Example of code highlighting
input_string_var = input(&amp;quot;Enter some data: &amp;quot;)
print(&amp;quot;You entered: {}&amp;quot;.format(input_string_var))
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example of code highlighting
input_string_var = input(&amp;quot;Enter some data: &amp;quot;)
print(&amp;quot;You entered: {}&amp;quot;.format(input_string_var))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;highlighting-options&#34;&gt;Highlighting options&lt;/h3&gt;

&lt;p&gt;The default theme uses &lt;a href=&#34;https://highlightjs.org&#34; target=&#34;_blank&#34;&gt;highlight.js&lt;/a&gt; for source code highlighting, and highlighting is enabled by default for all pages. However, several configuration options are supported that allow finer-grained control over highlight.js.&lt;/p&gt;

&lt;p&gt;The following table lists the supported options for configuring highlight.js, along with their expected type and a short description. A &amp;ldquo;yes&amp;rdquo; in the &lt;strong&gt;config.toml&lt;/strong&gt; column means the value can be set globally in &lt;code&gt;config.toml&lt;/code&gt;, and a &amp;ldquo;yes&amp;rdquo; in the &lt;strong&gt;preamble&lt;/strong&gt; column means that the value can be set locally in a particular page&amp;rsquo;s preamble.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;config.toml&lt;/th&gt;
&lt;th&gt;preamble&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;enable/disable highlighting&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight_languages&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;slice&lt;/td&gt;
&lt;td&gt;choose additional languages&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight_style&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;choose a highlighting style&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;option-highlight&#34;&gt;Option &lt;code&gt;highlight&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight&lt;/code&gt; option allows enabling or disabling the inclusion of highlight.js, either globally or for a particular page. If the option is unset, it has the same effect as if you had specified &lt;code&gt;highlight = true&lt;/code&gt;. That is, the highlight.js javascript and css files will be included in every page. If you&amp;rsquo;d like to only include highlight.js files on pages that actually require source code highlighting, you can set &lt;code&gt;highlight = false&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;, and then override it by setting &lt;code&gt;highlight = true&lt;/code&gt; in the preamble of any pages that require source code highlighting. Conversely, you could enable highlighting globally, and disable it locally for pages that do not require it. Here is a table that shows whether highlighting will be enabled for a page, based on the values of &lt;code&gt;highlight&lt;/code&gt; set in &lt;code&gt;config.toml&lt;/code&gt; and/or the page&amp;rsquo;s preamble.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;config.toml&lt;/th&gt;
&lt;th&gt;page preamble&lt;/th&gt;
&lt;th&gt;highlighting enabled for page?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;unset or false&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;option-highlight-languages&#34;&gt;Option &lt;code&gt;highlight_languages&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight_languages&lt;/code&gt; option allows you to specify additional languages that are supported by highlight.js, but are not considered &amp;ldquo;common&amp;rdquo; and therefore are not supported by default. For example, if you want source code highlighting for Go and clojure in all pages, set &lt;code&gt;highlight_languages = [&amp;quot;go&amp;quot;, &amp;quot;clojure&amp;quot;]&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;. If, on the other hand, you want to enable a language only for a specific page, you can set &lt;code&gt;highlight_languages&lt;/code&gt; in that page&amp;rsquo;s preamble.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;highlight_languages&lt;/code&gt; options specified in &lt;code&gt;config.toml&lt;/code&gt; and in a page&amp;rsquo;s preamble are additive. That is, if &lt;code&gt;config.toml&lt;/code&gt; contains, &lt;code&gt;highlight_languages = [&amp;quot;go&amp;quot;]&lt;/code&gt; and the page&amp;rsquo;s preamble contains &lt;code&gt;highlight_languages = [&amp;quot;ocaml&amp;quot;]&lt;/code&gt;, then javascript files for &lt;em&gt;both&lt;/em&gt; go and ocaml will be included for that page.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;highlight_languages&lt;/code&gt; option is set, then the corresponding javascript files will be served from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;. To see a list of available languages, visit the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs page&lt;/a&gt; and search for links with the word &amp;ldquo;languages&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;highlight_languages&lt;/code&gt; option provides an easy and convenient way to include support for additional languages to be severed from a CDN. If serving unmodified files from cdnjs doesn&amp;rsquo;t meet your needs, you can include javascript files for additional language support via one of the methods described in the &lt;a href=&#34;https://ndhillon.com/docs/get-started/#third-party-and-local-scripts-js&#34; target=&#34;_blank&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;option-highlight-style&#34;&gt;Option &lt;code&gt;highlight_style&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight_style&lt;/code&gt; option allows you to select an alternate css style for highlighted code. For example, if you wanted to use the solarized-dark style, you could set &lt;code&gt;highlight_style = &amp;quot;solarized-dark&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;highlight_style&lt;/code&gt; option is unset, the default is to use the file &lt;code&gt;/css/highlight.min.css&lt;/code&gt;, either the one provided by the default theme, or else the one in your local &lt;code&gt;static&lt;/code&gt; directory.  The &lt;code&gt;/css/highlight.min.css&lt;/code&gt; file provided by the default is equivalent to the &lt;code&gt;github&lt;/code&gt; style from highlight.js.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;highlight_style&lt;/code&gt; option &lt;em&gt;is&lt;/em&gt; set, then &lt;code&gt;/css/highlight.min.css&lt;/code&gt; is ignored, and the corresponding css file will be served from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;. To see a list of available styles, visit the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs page&lt;/a&gt; and search for links with the word &amp;ldquo;styles&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://highlightjs.org/static/demo/&#34; target=&#34;_blank&#34;&gt;highlight.js demo page&lt;/a&gt; for examples of available styles.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Not all styles listed on the &lt;a href=&#34;https://highlightjs.org/static/demo/&#34; target=&#34;_blank&#34;&gt;highlight.js demo page&lt;/a&gt; are available from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;. If you want to use a style that is not served by cdnjs, just leave &lt;code&gt;highlight_style&lt;/code&gt; unset, and place the corresponding css file in &lt;code&gt;/static/css/highlight.min.css&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;If you don&amp;rsquo;t want to change the default style; but you do want the style file served from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;, set &lt;code&gt;highlight_style = &amp;quot;github&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;highlight_style&lt;/code&gt; option is only recognized when set in &lt;code&gt;config.toml&lt;/code&gt;. Setting &lt;code&gt;highlight_style&lt;/code&gt; in your page&amp;rsquo;s preamble has no effect.&lt;/p&gt;

&lt;h2 id=&#34;twitter-tweet&#34;&gt;Twitter tweet&lt;/h2&gt;

&lt;p&gt;To include a single tweet, pass the tweet’s ID from the tweet&amp;rsquo;s URL as parameter to the shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; tweet 666616452582129664 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;youtube&#34;&gt;Youtube&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; youtube w7Ft2ymGmfc &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vimeo&#34;&gt;Vimeo&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; vimeo 146022717 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;github-gist&#34;&gt;GitHub gist&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; gist USERNAME GIST-ID  &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;speaker-deck&#34;&gt;Speaker Deck&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; speakerdeck 4e8126e72d853c0060001f97 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rm-latex-math&#34;&gt;$\rm \LaTeX$ math&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-TeX&#34;&gt;$$\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$$\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi$$&lt;/p&gt;

&lt;p&gt;Alternatively, inline math can be written by wrapping the formula with only a single &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is inline: $\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is inline: $\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$&lt;/p&gt;

&lt;p&gt;Note that Markdown special characters need to be escaped with a backslash so they are treated as math rather than Markdown. For example, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; become &lt;code&gt;\*&lt;/code&gt; and &lt;code&gt;\_&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h3 id=&#34;multiline-equations&#34;&gt;Multiline equations&lt;/h3&gt;

&lt;p&gt;The standard LaTeX line break consisting of 2 backslashes needs to be replaced with 6 backslashes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-TeX&#34;&gt;$$f(k;p\_0^\*) = \begin{cases} p\_0^\* &amp;amp; \text{if }k=1, \\\\\\
1-p\_0^\* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\&lt;br /&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;

&lt;h3 id=&#34;publication-abstracts&#34;&gt;Publication abstracts&lt;/h3&gt;

&lt;p&gt;As Hugo attempts to parse TOML, Markdown, and LaTeX content in the abstract, the following guidelines should be followed just for the publication &lt;code&gt;abstract&lt;/code&gt; and &lt;code&gt;abstract_short&lt;/code&gt; fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;escape each LaTeX backslash (&lt;code&gt;\&lt;/code&gt;) with an extra backslash, yielding &lt;code&gt;\\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;escape each LaTeX underscore (&lt;code&gt;_&lt;/code&gt;) with two backslashes, yielding &lt;code&gt;\\_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, &lt;code&gt;abstract = &amp;quot;${O(d_{\max})}$&amp;quot;&lt;/code&gt; becomes &lt;code&gt;abstract = &amp;quot;${O(d\\_{\\max})}$&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;table&#34;&gt;Table&lt;/h2&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Markdown&#34;&gt;| Command           | Description                    |
| ------------------| ------------------------------ |
| `hugo`            | Build your website.            |
| `hugo serve -w`   | View your website.             |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Build your website.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hugo serve -w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;View your website.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;alerts&#34;&gt;Alerts&lt;/h2&gt;

&lt;p&gt;Alerts are a useful feature that add side content such as tips, notes, or warnings to your articles. They are especially handy when writing educational tutorial-style articles. Use the corresponding shortcodes to enable alerts inside your content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% alert note %}}
Here&#39;s a tip or note...
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will display the following &lt;em&gt;note&lt;/em&gt; block:&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Here&amp;rsquo;s a tip or note&amp;hellip;&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;{{% alert warning %}}
Here&#39;s some important information...
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will display the following &lt;em&gt;warning&lt;/em&gt; block:&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Here&amp;rsquo;s some important information&amp;hellip;&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;A table of contents may be particularly useful for long posts or tutorial/documentation type content. Use the &lt;code&gt;{{% toc %}}&lt;/code&gt; shortcode anywhere you wish within your Markdown content to automatically generate a table of contents.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Footnote example.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Managing content</title>
      <link>https://ndhillon.com/docs/managing-content/</link>
      <pubDate>Fri, 16 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>https://ndhillon.com/docs/managing-content/</guid>
      <description>&lt;p&gt;This is a brief guide to managing content with the Hugo framework. Content can include publications, projects, talks, news/blog articles, and widget pages. After you have read this guide about creating and managing content, you may also be interested to learn about &lt;a href=&#34;https://ndhillon.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;writing content with Markdown, LaTeX, and Shortcodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enable LaTeX math rendering for a page, you should include &lt;code&gt;math = true&lt;/code&gt; in the page&amp;rsquo;s &lt;code&gt;+++&lt;/code&gt; preamble, as demonstrated in the included example site. Otherwise, to enable math on the homepage or for all pages, you must globally set &lt;code&gt;math = true&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To disable source code highlighting by default for all pages, set &lt;code&gt;highlight = false&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;. You can then enable source code highlighting only on pages that need it by setting &lt;code&gt;highlight = true&lt;/code&gt; in that page&amp;rsquo;s preamble. See the &lt;a href=&#34;https://ndhillon.com/docs/writing-markdown-latex/#code-highlighting&#34; target=&#34;_blank&#34;&gt;code-highlighting docs&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;To display a featured image in content page headers, the parameters below can be inserted towards the end of a page&amp;rsquo;s &lt;code&gt;+++&lt;/code&gt; preamble. It is assumed that the image is located in your &lt;code&gt;static/img/&lt;/code&gt; folder, so the full path in the example below will be &lt;code&gt;static/img/headers/getting-started.png&lt;/code&gt;. The &lt;code&gt;caption&lt;/code&gt; parameter can be used to write an image caption or credit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[header]
image = &amp;quot;headers/getting-started.png&amp;quot;
caption = &amp;quot;Image credit: [**Narinder**](https://github.com/nsdhillon/hugo-nsd/)&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;If you wish to prevent a featured image automatically being used for a post&amp;rsquo;s thumbnail on the homepage, the &lt;code&gt;preview = false&lt;/code&gt; parameter can be added to &lt;code&gt;[header]&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;create-a-publication&#34;&gt;Create a publication&lt;/h2&gt;

&lt;p&gt;To create a new publication:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new publication/my-paper-name.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then edit the default variables at the top of &lt;code&gt;content/publication/my-paper-name.md&lt;/code&gt; to include the details of your publication. The &lt;code&gt;url_&lt;/code&gt; variables are used to generate links associated with your publication, such as for viewing PDFs of papers. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;A publication title, such as title of a paper&amp;quot;

# Date first published.
date = &amp;quot;2013-07-01&amp;quot;

# Authors. Comma separated list, e.g. `[&amp;quot;Bob Smith&amp;quot;, &amp;quot;David Jones&amp;quot;]`.
authors = [&amp;quot;First author&#39;s name&amp;quot;, &amp;quot;Second author&#39;s name&amp;quot;]

# Publication type.
# Legend:
# 0 = Uncategorized
# 1 = Conference proceedings
# 2 = Journal
# 3 = Work in progress
# 4 = Technical report
# 5 = Book
# 6 = Book chapter
publication_types = [&amp;quot;1&amp;quot;]

# Publication name and optional abbreviated version.
publication = &amp;quot;In *International Conference*. You may use *Markdown* for italics etc.&amp;quot;
publication_short = &amp;quot;In *ICA*&amp;quot;

# Abstract and optional shortened version.
abstract = &amp;quot;The abstract. Markdown and math can be used (note that math may require escaping as detailed in the red alert box below).&amp;quot;
abstract_short = &amp;quot;A short version of the abstract.&amp;quot;

# Featured image thumbnail (optional)
image_preview = &amp;quot;&amp;quot;

# Is this a selected publication? (true/false)
selected = true

# Projects (optional).
#   Associate this publication with one or more of your projects.
#   Simply enter the filename (excluding &#39;.md&#39;) of your project file in `content/project/`.
#   E.g. `projects = [&amp;quot;deep-learning&amp;quot;]` references `content/project/deep-learning.md`.
projects = []

# Links (optional).
url_pdf = &amp;quot;pdf/my-paper-name.pdf&amp;quot;
url_preprint = &amp;quot;&amp;quot;
url_code = &amp;quot;&amp;quot;
url_dataset = &amp;quot;&amp;quot;
url_project = &amp;quot;&amp;quot;
url_slides = &amp;quot;&amp;quot;
url_video = &amp;quot;&amp;quot;
url_poster = &amp;quot;&amp;quot;
url_source = &amp;quot;&amp;quot;

# Custom links (optional).
#   Uncomment line below to enable. For multiple links, use the form `[{...}, {...}, {...}]`.
# url_custom = [{name = &amp;quot;Custom Link&amp;quot;, url = &amp;quot;http://example.org&amp;quot;}]

# Does the content use math formatting?
math = true

# Does the content use source code highlighting?
highlight = true

# Featured image
# Place your image in the `static/img/` folder and reference its filename below, e.g. `image = &amp;quot;example.jpg&amp;quot;`.
[header]
image = &amp;quot;headers/bubbles-wide.jpg&amp;quot;
caption = &amp;quot;My caption 😄&amp;quot;

+++

Further details on your publication can be written here using *Markdown* for formatting. This text will be displayed on the Publication Detail page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;url_&lt;/code&gt; links can either point to local or web content. Associated local publication content, such as PDFs, may be copied to a &lt;code&gt;static/pdf/&lt;/code&gt; folder and referenced like &lt;code&gt;url_pdf = &amp;quot;pdf/my-paper-name.pdf&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also associate custom link buttons with the publication by adding the following block within the variable preamble above, which is denoted by &lt;code&gt;+++&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;url_custom = [{name = &amp;quot;Custom Link 1&amp;quot;, url = &amp;quot;http://example.org&amp;quot;},
              {name = &amp;quot;Custom Link 2&amp;quot;, url = &amp;quot;http://example.org&amp;quot;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you set &lt;code&gt;list_format=2&lt;/code&gt; to enable a detailed listing of publications in the Publication Widget (&lt;code&gt;home/publications.md&lt;/code&gt;) or Publication Archive (&lt;code&gt;publication/_index.md&lt;/code&gt;), then there are a few more optional variables that you can include in the publication page preamble. You may use &lt;code&gt;abstract_short = &amp;quot;friendly summary of abstract&amp;quot;&lt;/code&gt; and &lt;code&gt;publication_short = &amp;quot;abbreviated publication details&amp;quot;&lt;/code&gt; to display a friendly summary of the abstract and abbreviate the publication details, respectively. Furthermore, there is the option to display a different image on the homepage to the publication detail page by setting &lt;code&gt;image_preview = &amp;quot;my-image.jpg&amp;quot;&lt;/code&gt;. This can be useful if you wish to scale down the image for the homepage or simply if you just wish to show a different image for the preview.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Any double quotes (&lt;code&gt;&amp;quot;&lt;/code&gt;) or backslashes (e.g. LaTeX &lt;code&gt;\times&lt;/code&gt;) occurring within the value of any frontmatter parameter (such as the &lt;em&gt;abstract&lt;/em&gt;) should be escaped with a backslash (&lt;code&gt;\&lt;/code&gt;). For example, the symbol &lt;code&gt;&amp;quot;&lt;/code&gt; and LaTeX text &lt;code&gt;\times&lt;/code&gt; become &lt;code&gt;\&amp;quot;&lt;/code&gt; and &lt;code&gt;\\times&lt;/code&gt;, respectively. Refer to the &lt;a href=&#34;https://github.com/toml-lang/toml#user-content-string&#34; target=&#34;_blank&#34;&gt;TOML documentation&lt;/a&gt; for more info.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;create-a-blog-post&#34;&gt;Create a blog post&lt;/h2&gt;

&lt;p&gt;To create a blog/news article:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/my-article-name.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then edit the newly created file &lt;code&gt;content/post/my-article-name.md&lt;/code&gt; with your full title and content.&lt;/p&gt;

&lt;p&gt;Hugo will automatically generate summaries of posts that appear on the homepage. If you are dissatisfied with an automated summary, you can either limit the summary length by appropriately placing &lt;code&gt;&amp;#60;&amp;#33;&amp;#45;&amp;#45;more&amp;#45;&amp;#45;&amp;#62;&lt;/code&gt; in the article body, or completely override the automated summary by adding a &lt;code&gt;summary&lt;/code&gt; parameter to the &lt;code&gt;+++&lt;/code&gt; preamble such that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;summary = &amp;quot;Summary of my post.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To disable commenting for a specific post, you can add &lt;code&gt;disable_comments = true&lt;/code&gt; to the post &lt;code&gt;+++&lt;/code&gt; preamble. Or to disable commenting for all posts, you can either set &lt;code&gt;disqusShortname = &amp;quot;&amp;quot;&lt;/code&gt; or &lt;code&gt;disable_comments = true&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-a-project&#34;&gt;Create a project&lt;/h2&gt;

&lt;p&gt;To create a project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new project/my-project-name.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then edit the newly created file &lt;code&gt;content/project/my-project-name.md&lt;/code&gt;. Either you can link the project to an external project website by setting the &lt;code&gt;external_link = &amp;quot;http://external-project.com&amp;quot;&lt;/code&gt; variable at the top of the file, or you can add content (below the final &lt;code&gt;+++&lt;/code&gt;) in order to render a project page on your website.&lt;/p&gt;

&lt;h2 id=&#34;create-a-talk&#34;&gt;Create a talk&lt;/h2&gt;

&lt;p&gt;To create a talk:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new talk/my-talk-name.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then edit the newly created file &lt;code&gt;content/talk/my-talk-name.md&lt;/code&gt; with your full talk title and details. Note that many of the talk parameters are similar to the publication parameters.&lt;/p&gt;

&lt;h2 id=&#34;create-a-widget-page&#34;&gt;Create a widget page&lt;/h2&gt;

&lt;p&gt;So you would like to create a page which utilizes Hugo&amp;rsquo;s widget system, similar to the homepage?&lt;/p&gt;

&lt;p&gt;Create a new folder in your &lt;code&gt;content&lt;/code&gt; folder, naming it with your new page name. In this example, we will create a &lt;em&gt;courses&lt;/em&gt; page by creating a &lt;code&gt;content/courses/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Within your new &lt;code&gt;content/courses/&lt;/code&gt; folder, create a file named &lt;code&gt;_index.md&lt;/code&gt; containing the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;Courses&amp;quot;
date = 2017-01-01
widgets = true
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install widgets into your &lt;code&gt;content/courses/&lt;/code&gt; folder. To achieve this, widgets can be copied from your &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;create-other-pages-e-g-cv&#34;&gt;Create other pages (e.g. CV)&lt;/h2&gt;

&lt;p&gt;For other types of content, it is possible to create your own custom pages. For example, let&amp;rsquo;s create a &lt;code&gt;cv.md&lt;/code&gt; page for your Curriculum Vitae in your &lt;code&gt;content&lt;/code&gt; folder. Copy across the frontmatter from the top of one of your post files, adapting it as necessary, and editing your Markdown content below. You can then link to your new page by adding the code &lt;code&gt;[My CV]{{&amp;lt; ref &amp;quot;cv.md&amp;quot; &amp;gt;}}&lt;/code&gt; to any of your existing content.&lt;/p&gt;

&lt;p&gt;Alternatively, for the above example, we could use a PDF of your Curriculum Vitae. For this purpose, create a folder called &lt;code&gt;files&lt;/code&gt; within your &lt;code&gt;static&lt;/code&gt; folder and move a PDF file named &lt;code&gt;cv.pdf&lt;/code&gt; to that location, so we have a &lt;code&gt;static/files/cv.pdf&lt;/code&gt; file path. The PDF can then be linked to from any content by using the code: &lt;code&gt;{{% staticref &amp;quot;files/cv.pdf&amp;quot; %}}Download my CV{{% /staticref %}}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;manage-archive-pages&#34;&gt;Manage archive pages&lt;/h2&gt;

&lt;p&gt;The archive (or &lt;em&gt;node index&lt;/em&gt;) pages (e.g. &lt;code&gt;/post/&lt;/code&gt;) are the special pages which list all of your content. They can exist for blog posts, publications, and talks. The homepage widgets will automatically link to the archive pages when you have more items of content than can be displayed in the widget. Therefore, if you don&amp;rsquo;t have much content, you may not see the automatic links yet - but you can also manually link to them using a normal Markdown formatted link in your content.&lt;/p&gt;

&lt;p&gt;You can edit the title and add your own content, such as an introduction, by copying the following content &lt;code&gt;_index.md&lt;/code&gt; files to the same structure within your &lt;code&gt;content/&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;Then edit the &lt;code&gt;title&lt;/code&gt; parameter in each &lt;code&gt;_index.md&lt;/code&gt; as desired and add any content after the &lt;code&gt;+++&lt;/code&gt; preamble/frontmatter ends. You will notice that the &lt;code&gt;_index.md&lt;/code&gt; files differ slightly, with some having special options available for the associated content type. For example, &lt;code&gt;publication/_index.md&lt;/code&gt; contains an option for setting the citation style of the listings which appear on the publication archive page.&lt;/p&gt;

&lt;h2 id=&#34;removing-content&#34;&gt;Removing content&lt;/h2&gt;

&lt;p&gt;Generally, to remove content, simply delete the relevant file from your &lt;code&gt;content/post&lt;/code&gt;, &lt;code&gt;content/publication&lt;/code&gt;, &lt;code&gt;content/project&lt;/code&gt;, or &lt;code&gt;content/talk&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;view-your-updated-site&#34;&gt;View your updated site&lt;/h2&gt;

&lt;p&gt;After you have made changes to your site, you can view it by running the &lt;code&gt;hugo server&lt;/code&gt; command and then opening &lt;a href=&#34;http://localhost:1313&#34; target=&#34;_blank&#34;&gt;localhost:1313&lt;/a&gt; in your web browser.&lt;/p&gt;

&lt;h2 id=&#34;deploy-your-site&#34;&gt;Deploy your site&lt;/h2&gt;

&lt;p&gt;Finally, you can build the static website to a &lt;code&gt;public/&lt;/code&gt; folder ready for deployment using the &lt;code&gt;hugo&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;You may then deploy your site by copying the &lt;code&gt;public/&lt;/code&gt; directory (by FTP, SFTP, WebDAV, Rsync, git push, etc.) to your production web server.&lt;/p&gt;

&lt;p&gt;Note that running &lt;code&gt;hugo&lt;/code&gt; does not remove any previously generated files before building. Therefore, it&amp;rsquo;s best practice to delete your &lt;code&gt;public/&lt;/code&gt; directory prior to running &lt;code&gt;hugo&lt;/code&gt; to ensure no old or interim files are deployed to your server.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why Hashing?</title>
      <link>https://ndhillon.com/post/hashing/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ndhillon.com/post/hashing/</guid>
      <description>

&lt;p&gt;When using algorithms and searching we often have &lt;em&gt;key&lt;/em&gt; that needs to lookup a data structure or value. These keys are often strings and by nature are not really good in array indexing which requires an integer. Here hashing comes to play where we convert a key into an array index for a table lookup.&lt;/p&gt;

&lt;h1 id=&#34;uses-for-hashing&#34;&gt;Uses for Hashing&lt;/h1&gt;

&lt;h2 id=&#34;lookups&#34;&gt;Lookups&lt;/h2&gt;

&lt;p&gt;Lookups using a data structure called hash table for quick access to objects. Here hashing is applied to the key to a index value. When two different keys result in the same index value we have what is called a collision.&lt;/p&gt;

&lt;h2 id=&#34;cryptography&#34;&gt;Cryptography&lt;/h2&gt;

&lt;p&gt;Algorithms that are designed to towards security and are used to create digital fingerpints for authentication and data integrity&lt;/p&gt;

&lt;h1 id=&#34;hashing-terminology&#34;&gt;Hashing Terminology&lt;/h1&gt;

&lt;h2 id=&#34;open-addressing&#34;&gt;Open Addressing&lt;/h2&gt;

&lt;p&gt;A method of collision resolution in hash tables. With this method a hash collision is resolved by &lt;em&gt;probing&lt;/em&gt;, or searching through alternate locations in the array (the &lt;em&gt;probe sequence&lt;/em&gt;) until either the target record is found, or an unused array slot is found, which indicates that there is no such key in the table. A critical influence on performance of an open addressing hash table is the load factor; that is, the proportion of the slots in the array that are used. As the load factor increases towards 100%, the number of probes that may be required to find or insert a given key rises dramatically.&lt;/p&gt;

&lt;p&gt;Probe sequences include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Linear&lt;/code&gt; probing
in which the interval between probes is fixed — often set to 1.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Quadratic&lt;/code&gt; probing
in which the interval between probes increases linearly (hence, the indices are described by a quadratic function).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Double&lt;/code&gt; hashing
in which the interval between probes is fixed for each record but is computed by another hash function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main tradeoffs between these methods are that linear probing has the best cache performance but is most sensitive to clustering, while double hashing has poor cache performance but exhibits virtually no clustering; quadratic probing falls in-between in both areas. Double hashing can also require more computation than other forms of probing.&lt;/p&gt;

&lt;h1 id=&#34;hash-functions&#34;&gt;Hash functions&lt;/h1&gt;

&lt;h2 id=&#34;perfect-hash-function&#34;&gt;Perfect hash function&lt;/h2&gt;

&lt;p&gt;Maps keys into index values (slots) without any collisions. In the worst case each lookup takes constant time.&lt;/p&gt;

&lt;h3 id=&#34;minimum-perfect-hash-function&#34;&gt;Minimum Perfect Hash Function&lt;/h3&gt;

&lt;h2 id=&#34;cuckoo-hash-function&#34;&gt;Cuckoo hash function&lt;/h2&gt;

&lt;p&gt;The basic idea of cuckoo hashing is to resolve collisions by using two hash functions instead of only one. This provides two possible locations in the hash table for each key. In one of the commonly used variants of the algorithm, the hash table is split into two smaller tables of equal size, and each hash function provides an index into one of these two tables. Lookup requires inspection of just two locations in the hash table, which takes constant time in the worst case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hashing</title>
      <link>https://ndhillon.com/project/hashing/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ndhillon.com/project/hashing/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In its simplest form &lt;code&gt;hashing&lt;/code&gt; is generation of a value or values from a string of text using a mathematical function. So we also refer to it as a hash function that maps data of arbitrary size to data of fixed size.&lt;/p&gt;

&lt;p&gt;It by the definition and implementation is generally regarded as Pseudo Random Number Generators (PRNG).&lt;/p&gt;

&lt;h2 id=&#34;properties&#34;&gt;Properties&lt;/h2&gt;

&lt;h3 id=&#34;determinism&#34;&gt;Determinism&lt;/h3&gt;

&lt;p&gt;A hash procedure must be deterministic - meaning that for a given input value it must always generate the same hash value.&lt;/p&gt;

&lt;h3 id=&#34;uniformity&#34;&gt;Uniformity&lt;/h3&gt;

&lt;p&gt;A good hash function should map the expected inputs as evenly as possible over its output range because the cost of the hash increases with the number collisions.&lt;/p&gt;

&lt;h3 id=&#34;fixed-and-defined-range&#34;&gt;Fixed and defined range&lt;/h3&gt;

&lt;p&gt;It is often desirable that the output of a hash function have fixed size. Producing fixed-length output from variable length input can be accomplished by breaking the input data into chunks of specific size.&lt;/p&gt;

&lt;h2 id=&#34;guidelines-for-implementing-hash-functions&#34;&gt;Guidelines for implementing hash functions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When hashing large messages, one could break the message up into chunks and compute the hash of each chunk in parallel then aggregate the hashes using a mix operation, this will dramatically increase the throughput of the hash function when running upon architectures that support multiple cores. This method of hashing is known as a &lt;code&gt;Merkle-Tree&lt;/code&gt; or a hash-tree.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &amp;ldquo;mix&amp;rdquo; operation does not need to be the same on each round. There could be multiple mix operations which are selected based on criteria such as the index of the current round, the value of the internal state etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The operations present in the Mix should be carefully chosen, as more often than not the mixing process may result in lowering the entropy of the internal state to the point where the internal state does not change. As an example in the mix operation denoted above if the internal state reaches the value ZERO it will typically end-up returning zero.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The mix operation should handle repeated values in the message block, without causing a &amp;ldquo;flush effect on the internal state. A typical scenario might be a message comprised of bytes with the value of zero. Ideally a well designed has function should take a long-time before it reduces the internal state to zero.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When hashing a key derived-from or otherwise aliasing a pointer to memory that has been obtain from an allocator that returns aligned addresses, one will observe that the first 2 or 3 Least Significant Bits (LSBs) of the key will always be zero, or in other words will have zero entropy. This is due to the fact that the pointers will be storing addresses that are multiples of either 4 or 8 depending on the machine&amp;rsquo;s addressing granularity. The following are a couple of techniques to resolve the issue of low-entropy LSBs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fill in the LSBs with bits from their higher order neighbours: pointer |= (pointer &amp;gt;&amp;gt; 3) &amp;amp; 0x03&lt;/li&gt;
&lt;li&gt;Fill in the LSBs with bits from a LUT: pointer |= lut[round_i % lut_size] &amp;amp; 0x03&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;types-of-hashing-usescases-application&#34;&gt;Types of Hashing - usescases/application&lt;/h2&gt;

&lt;h3 id=&#34;1-string-hashing&#34;&gt;1. String hashing&lt;/h3&gt;

&lt;p&gt;Simplest and often used in area of data storage where it forms the basis if indexing into hash tables.&lt;/p&gt;

&lt;h3 id=&#34;2-cryptographic-hashing&#34;&gt;2. Cryptographic Hashing&lt;/h3&gt;

&lt;p&gt;A special class of hash function that has certain properties which make it suitable for use in cryptography. It is a mathematical algorithm that maps data of arbitrary size to a bit string of a fixed size (a hash) and is designed to be a one-way function, that is, a function which is infeasible to invert. The input data is often called the message, and the output (the hash value or hash) is often called the message digest or simply the digest.&lt;/p&gt;

&lt;p&gt;The ideal cryptographic hash function has five main properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is deterministic so the same message always results in the same hash&lt;/li&gt;
&lt;li&gt;it is quick to compute the hash value for any given message&lt;/li&gt;
&lt;li&gt;it is infeasible to generate a message from its hash value except by trying all possible messages&lt;/li&gt;
&lt;li&gt;a small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value&lt;/li&gt;
&lt;li&gt;it is infeasible to find two different messages with the same hash value&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usecases&#34;&gt;Usecases&lt;/h4&gt;

&lt;h5 id=&#34;password-checks&#34;&gt;Password checks&lt;/h5&gt;

&lt;p&gt;To authenticate a user, the password presented by the user is hashed and compared with the stored hash. The password is often concatenated with a random, non-secret salt value before the hash function is applied. The salt is stored with the password hash. &lt;a href=&#34;https://en.wikipedia.org/wiki/Argon2&#34; target=&#34;_blank&#34;&gt;Argon2&lt;/a&gt; is the NIST (&lt;a href=&#34;pdf/NIST.SP.800-63b.pdf&#34; target=&#34;_blank&#34;&gt;SP 800-63B-3&lt;/a&gt;) recommended algorithm.&lt;/p&gt;

&lt;h5 id=&#34;verifying-the-integrity-of-files-or-messages&#34;&gt;Verifying the integrity of files or messages&lt;/h5&gt;

&lt;p&gt;Determining whether any changes have been made to a message (or a file), for example, can be accomplished by comparing message digests calculated before, and after, transmission (or any other event). &lt;code&gt;MD5&lt;/code&gt;, &lt;code&gt;SHA1&lt;/code&gt;, or &lt;code&gt;SHA2&lt;/code&gt; hashes are sometimes posted along with files on websites or forums to allow verification of integrity.[6] This practice establishes a chain of trust so long as the hashes are posted on a site authenticated by HTTPS.&lt;/p&gt;

&lt;h5 id=&#34;file-or-data-identifier&#34;&gt;File or data identifier&lt;/h5&gt;

&lt;p&gt;A digest can also reliably used to identify a file; source code management systems like Git, use the &lt;strong&gt;sha1sum&lt;/strong&gt; of various types of content (file content, directory trees, ancestry information, etc.) to uniquely identify them. Hashes are used to identify files on peer-to-peer filesharing networks. For example, in an ed2k/Magnet link, is combined with the file size, providing sufficient information for locating file sources, downloading the file and verifying its contents.&lt;/p&gt;

&lt;h5 id=&#34;proof-of-work&#34;&gt;Proof of work&lt;/h5&gt;

&lt;p&gt;A proof-of-work system (or protocol, or function) is an economic measure to deter denial-of-service attacks and other service abuses such as spam on a network by requiring some work from the service requester, usually meaning processing time by a computer. A key feature of these schemes is their asymmetry: the work must be moderately hard (but feasible) on the requester side but easy to check for the service provider. Bitcoin is an example.
The way it typically works, is a known value K is given (some number of bits), then either an expected hash value or a hash value with a specific trait (eg: certain number of leading zero bits) is proposed.
The applicant (aka entity performing the work) will then go off and perform a computation to determine another piece data D, such that H(K | D) (the hash of the concatenation of K and D) will either be equal to the expected hash value or will posses the properties required to prove the work has been done. Furthermore because the verification of the hash value can be performed cheaply and efficiently and the work in computing the value D itself must be done in full .&lt;/p&gt;

&lt;h3 id=&#34;3-geometric-hashing&#34;&gt;3. Geometric Hashing&lt;/h3&gt;

&lt;p&gt;A hashing technique developed in the field of computer vision for matching features against a database of such features. This is object recognition that allows objects to be identified in an image that are partially occluded or have gone gemetric transformation.&lt;/p&gt;

&lt;h3 id=&#34;4-bloom-filters&#34;&gt;4. Bloom Filters&lt;/h3&gt;

&lt;p&gt;A Bloom filter is a data structure designed to tell you, rapidly and memory-efficiently, whether an element is present in a set. The price paid for this efficiency is that a Bloom filter is a probabilistic data structure: it tells us that the element either definitely is not in the set or may be in the set. Often it is coded as a bit-vector where a larger filter will have less false positives.&lt;/p&gt;

&lt;p&gt;Bloom filters are commonly found in applications such as spell-checkers, string matching algorithms, network packet analysis tools and network/internet caches.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
